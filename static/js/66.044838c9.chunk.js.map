{"version":3,"file":"static/js/66.044838c9.chunk.js","mappings":"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","sources":["webpack://goit-react-hw-08-phonebook/./src/components/TextField/TextField.module.css?b6c9","components/TextField/TextField.jsx","components/TextField/field.jsx","webpack://goit-react-hw-08-phonebook/./src/components/Register/Register.module.css?88e5","components/Register/initialState.js","components/Register/RegisterForm.jsx","pages/Register.jsx","../node_modules/nanoid/index.browser.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"input\":\"TextField_input__Co8UC\"};","import { useMemo } from 'react';\nimport { nanoid } from 'nanoid';\nimport s from './TextField.module.css';\n\nexport default function TextField({\n  label,\n  name,\n  value,\n  onChange,\n  type,\n  placeholder,\n  required,\n}) {\n  const id = useMemo(() => nanoid(), []);\n\n  return (\n    <div>\n      {label && <label htmlFor={id}>{label}</label>}\n      <input\n        className={s.input}\n        id={id}\n        name={name}\n        value={value}\n        onChange={onChange}\n        type={type}\n        placeholder={placeholder}\n        required={required}\n      />\n    </div>\n  );\n}\n\nTextField.defaultProps = {\n  type: 'text', //propTypes\n  required: false,\n};\n","export const field = {\n  name: {\n    // label: 'Name',\n    name: 'name',\n    type: 'text',\n    placeholder: 'Enter a name',\n    required: true,\n  },\n\n  email: {\n    // label: 'Email',\n    name: 'email',\n    type: 'email',\n    placeholder: 'Enter an email',\n    required: true,\n  },\n  password: {\n    // label: 'Password',\n    name: 'password',\n    type: 'password',\n    placeholder: 'Enter a password',\n    required: true,\n  },\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"wrap\":\"Register_wrap__ctDv2\",\"img\":\"Register_img__TBG7q\",\"form\":\"Register_form__VD04X\",\"formGroup\":\"Register_formGroup__cyHQD\",\"btn\":\"Register_btn__xxFZe\",\"wrapTxt\":\"Register_wrapTxt__FSwna\",\"wrapP\":\"Register_wrapP__t6R43\"};","export const initialState = {\n  name: '',\n  email: '',\n  password: '',\n};\n","import s from './Register.module.css';\nimport { useState } from 'react';\nimport { NavLink } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nimport { initialState } from './initialState';\n\nimport TextField from 'components/TextField/TextField';\nimport { field } from 'components/TextField/field';\n\nimport avatar from '../../images/avatar-register.JPG';\n\nconst RegisterForm = ({ onSubmit }) => {\n  const [state, setState] = useState({ ...initialState });\n\n  const onChange = e => {\n    const { name, value } = e.currentTarget;\n    setState({\n      ...state,\n      [name]: value,\n    });\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    onSubmit({ ...state });\n    setState({ ...initialState });\n  };\n\n  const { name, email, password } = state;\n\n  return (\n    <div className=\"container\">\n      <div className={s.wrap}>\n        <div>\n          <img className={s.img} src={avatar} alt=\"avatar\" />\n        </div>\n        <h3>WELCOME</h3>\n        <p>Sign up by entering your information below</p>\n        <form className={s.form} onSubmit={handleSubmit}>\n          <div className={s.formGroup}>\n            <TextField value={name} onChange={onChange} {...field.name} />\n          </div>\n          <div className={s.formGroup}>\n            <TextField value={email} onChange={onChange} {...field.email} />\n          </div>\n          <div className={s.formGroup}>\n            <TextField\n              value={password}\n              onChange={onChange}\n              {...field.password}\n            />\n          </div>\n\n          <div className={s.formGroup}>\n            <button className={s.btn} type=\"submit\">\n              Sign Up\n            </button>\n          </div>\n        </form>\n\n        <div className={s.wrapTxt}>\n          <p className={s.wrapP}>Have an account?</p>\n\n          <NavLink to=\"/login\">SIGN IN</NavLink>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default RegisterForm;\n\nRegisterForm.defaultProps = {\n  onSubmit: () => {},\n};\n\nRegisterForm.propTypes = {\n  onSubmit: PropTypes.func,\n};\n","import { useDispatch } from 'react-redux';\nimport { Navigate } from 'react-router-dom';\nimport useAuth from 'helpers/hooks/useAuth';\n\nimport RegisterForm from '../components/Register/RegisterForm';\nimport { signup } from 'redux/auth/auth-operations';\n\nexport default function Register() {\n  const isLogin = useAuth();\n\n  const dispatch = useDispatch();\n  const onSignup = data => {\n    dispatch(signup(data));\n  };\n\n  if (isLogin) {\n    return <Navigate to=\"/contacts\" />;\n  }\n  return (\n    <main>\n      <div>\n        <RegisterForm onSubmit={onSignup} />\n      </div>\n    </main>\n  );\n}\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["TextField","label","name","value","onChange","type","placeholder","required","id","useMemo","nanoid","htmlFor","className","s","defaultProps","field","email","password","initialState","RegisterForm","onSubmit","useState","state","setState","e","currentTarget","src","avatar","alt","preventDefault","to","Register","isLogin","useAuth","dispatch","useDispatch","data","signup","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase"],"sourceRoot":""}